REST - REpresentational State Transfer
--------------------------------------
It's used to create API 
API - Application Programming Interface 

HTTP Verbs 
1. GET
2. POST
3. PUT
4. DELETE
5. PATCH 

All these 5 request are necessary to implement to create our own API 

Install Robo3T
--------------
We can interact with our Mongodb Database (GUI Interface)

const Article = mongoose.model("items", articleScheme); - (collection, Schema)

Article.find(function(err,found)) - (error object, Variable data store database)

GET Method - Robo3T

Post Method - Postman

POSTMAN
-------

To Insert :
. Url 
. name 
. title 

app.post("/articles",function(req,res)
{
    const element1 = new Article
    ({
        name: req.body.name, - we can insert it directly into our database without creating any form 
        title: req.body.title - POSTMAN app help 
    });
    element1.save();
});

To delete 
---------
Article.deletemany - Model name, Function name

app.delete("/articles", async (req, res) => {
    try {
        const result = await Article.deleteMany({});
        res.send(`Deleted ${result.deletedCount} articles`);
    } catch (err) {
        res.status(500).send(err);
    }
});

POSTMAN - body - del - req send

localhost:8000/articles/Aws - user want to see Aws then Aws should be store in form of variable

Article.findOne({title: req.params.articleTitle}) - Value entered by the user inside the url or param matches with the title then only the article is been shown 

To get specific record from a database 

PUT Method 
----------
Used to update the complete document 

Ex - Name & desc change in a document 

Using the Postman - Put - Body - s-www-form-encoded - key value description 

app.put("/articles/:articleTitle",async (req, res) => {
    try {
        const result = await Article.updateMany(
            { title: req.params.articleTitle },
            { title: req.body.title, desc: req.body.desc },
            { overwrite: true }
        );

        if (result.modifiedCount > 0) {
            res.send("Updated");
        } else {
            res.status(404).send("Article not found");
        }
    } catch (err) {
        console.log(err);
        res.status(500).send("Error updating article");
    }
}); -- code 

PATCH METHOD 
------------
It's used to update a particular record in a document it's used becuase PUT will change the whole document

It didn't work further modification required as the code get very bigger with other methods that may be one of the reason 