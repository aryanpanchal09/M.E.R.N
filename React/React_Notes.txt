React (JS Library) - The library for web and native user interfaces
Used for User interface
Open Source Library
Not a framework
Has a rich ecosystem 

Created and maintain by Facebook 

CodeSandBox 
-----------
React Editor & Sign in Github

Class Component
---------------
This Component are simple classes which are made up of multiple functions which add functionality to the application 

All the class based component are child classes of Component Class React JS

The Class must implement render member function which returns the react component to render which is similar to a return value of functional Component 

JSX
---
JSX - JavaScriptXML It allows us to write html element in JS and place them inside the dom without any create element or apend child which we used to write inside our javascript 

JSX converts the html tags into react elements

We don't require to use JSX but JSX makes it easier to write React Application. So JSX is not an compulsion 

import "./styles.css";
const name = "Rohan";
let a = 15;
let msg = "";
if(a>10)
  {
    msg = "Hello"
  }
else 
{
  msg = "Bye"
}

export default function App() {
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>{msg}</h2>
    </div>
  );
}

Introduction to JSX 
-------------------
import "./styles.css";
import React from "react";
function App() {
  return(
    <div>
    <h1>Hello World</h1>
    <ul>
      <li>Apples</li>
      <li>Mangoes</li>
      <li>Bananas</li>
    </ul>
  </div>
  )
}
export default App;

Introduction to JSX2
--------------------
import "./styles.css";
import React from "react";
const name = "Rohit";
const year = "2024";

function App() {
  return (
    <div>
      <p>Hello {name}</p>
      <p>Current Year: {year}</p>
    </div>
  );
}
export default App;

Inline Style for react elements 
-------------------------------

Style element value must be a JS object 
In JSX JS expression are written inside the {} braces 
Since JS object also use {} braces the styling is written inside 2 sets of {} braces 

import React from "react";
let obj = {
  color: "red",
  backgroundColor: "yellow",
};
let obj1 = {
  fontSize: '50px',
  fontFamily: 'cooper'
};
function App() {
  return (
    <div>
      {/* <h1 style="color:red">Hello World</h1> */}
      {/* <h1 style={{ color: "red", backgroundColor: "yellow" }}>Hello World</h1> */}
      {/* <h1 style={obj}>Hello World</h1> */}
      <h1 style={{...obj, ...obj1}}>Hello World</h1>
    </div>
  );
}
export default App;

React Components
----------------
App.js 

import React from "react";
import Header from "./Header";
import List from "./List";
function App() {
  return (
    <div>
      <Header />
      <List />
    </div>
  );
}
export default App;

Header.js 

import React from "react";
function Header() {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
}
export default Header;

List.js 

import React from "react";
function List() {
  return (
    <div>
      <ul>
        <li>Apples</li>
        <li>Mangoes</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
}

export default List;


React 
-----
npm install -g create-react-app (-g globally install)
npx create-react-app my-app

Props 
-----

Properties - these are the argument which are passed into react component

Props are passed to components via html arrtibutes 

And to send props into an component we use the same syntax as html attributes

Basic Purpose - Helps us to make our program dynamic

Mapping_Function
----------------
The map() function is essential for rendering dynamic lists in React applications

App File 
========
function createHello(info){
    return(
        <div><Hello name={info.name} number={info.number} /></div>
    )
}

function App() {
    return <div>
        {info.map(createHello)}
    </div>;
}

info file 
=========
const info = [
    {
        id: 1,
        name: "Rohan",
        number: 9313369904
    },

Hello file
==========
function Hello(props) {
  return (
    <div>
      <h1> Hello {props.name} </h1>
      <h2> Age {props.age} </h2>
    </div>
  );
}


Arrow Function 
--------------
Arrow function are used to reduce the size of a function constant

function App() {
    return <div>
        <h1>Hi everyone</h1>
    </div>;
}

the code gets shorter if the function has only one statement

const App = () => <h1>Hi everyone</h1>

We can also create Arrow Function with Parameters

Conditional Rndering
---------------------
Conditional Rendering is used to allows developers to create responsive and engaging user interfaces

It allows you to display different content based on certain conditions or states

It works as same as in javascript

. If else
. Logical AND(&&) Operator 
. Ternery Operator 

If else 
```````
function App() {
    const name = "Aryan";
    
    if (name === "Aryan") {
        return <Component1 />;
    } else {
        return <Component2 />;
    }
}

Logical && Operator 
```````````````````
function App() {
    const name = "Aryan";
    const age = "23"
    return(
        <div>
            {age>=18 ? <h1>You are eligible</h1>: <h1>You are not eligible</h1>} : is used for else statement
            {name == "Rohan" && <h1>Hi Rohan</h1>}
        </div>
    )
}

List Rendering 
--------------
List is very useful when it comes to developing the ui of any website 

Mainly used for displaying things in the website 
For ex : 
. List of Products 
. List of Names

Executed using for loop and while loop In JS Map Array method is preferable